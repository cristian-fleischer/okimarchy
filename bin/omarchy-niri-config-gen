#!/bin/bash
#
# omarchy-niri-config-gen - Simple Niri configuration generator for Okimarchy
# Concatenates multiple KDL files into a single config.kdl for Niri
#

set -euo pipefail

# Hardcoded sources to concatenate (order matters!)
SOURCES=(
    "$HOME/.config/niri/input.kdl"
    "$HOME/.config/niri/layout.kdl"
    "$HOME/.config/niri/autostart.kdl"
    "$HOME/.config/niri/bindings.kdl"
    "$HOME/.config/niri/windows.kdl"
    "$HOME/.config/niri/workspaces.kdl"
    "$HOME/.config/omarchy/current/theme/niri.kdl"
)

# Output file
OUTPUT_PATH="$HOME/.config/niri/config.kdl"

# Colors for output
GREEN='\033[32m'
RED='\033[31m'
YELLOW='\033[33m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${GREEN}[omarchy-niri-config-gen]${NC} $1"
}

print_error() {
    echo -e "${RED}[omarchy-niri-config-gen]${NC} $1" >&2
}

print_warn() {
    echo -e "${YELLOW}[omarchy-niri-config-gen]${NC} $1" >&2
}

show_help() {
    cat << 'HELP'
omarchy-niri-config-gen - Niri configuration generator for Okimarchy

USAGE:
    omarchy-niri-config-gen [COMMAND]

COMMANDS:
    generate    Generate Niri config by concatenating source files (default)
    check       Check if all source files exist
    validate    Validate the generated config file only
    help        Show this help message

The tool concatenates the following files in order:
    ~/.config/niri/input.kdl
    ~/.config/niri/layout.kdl
    ~/.config/niri/autostart.kdl
    ~/.config/niri/bindings.kdl
    ~/.config/niri/windows.kdl
    ~/.config/niri/workspaces.kdl
    ~/.config/niri/envs.kdl
    ~/.config/omarchy/current/theme/niri.kdl

Output: ~/.config/niri/config.kdl

The generated config is automatically validated using 'niri validate'.
HELP
}

check_files() {
    local missing_files=()

    print_info "Checking source files..."

    for source in "${SOURCES[@]}"; do
        if [[ ! -f "$source" ]]; then
            missing_files+=("$source")
        fi
    done

    if [[ ${#missing_files[@]} -gt 0 ]]; then
        print_error "Missing source files:"
        printf '%s\n' "${missing_files[@]}" >&2
        return 1
    fi

    print_info "All source files found ✓"
    return 0
}

validate_config() {
    print_info "Validating generated config..."

    if [[ ! -f "$OUTPUT_PATH" ]]; then
        print_error "Config file does not exist: $OUTPUT_PATH"
        return 1
    fi

    # Use niri validate to check the generated config
    if niri validate --config "$OUTPUT_PATH" >/dev/null 2>&1; then
        print_info "Configuration validation passed ✓"
        return 0
    else
        print_error "Configuration validation FAILED!"
        print_error "Running niri validate to show errors:"
        echo ""
        niri validate --config "$OUTPUT_PATH" || true
        echo ""
        print_error "Please check the source files for syntax errors"
        return 1
    fi
}

write_warning_header() {
    local temp_file="$1"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    cat >> "$temp_file" << EOF
//
// ╔═══════════════════════════════════════════════════════════════════════════════╗
// ║                                    WARNING                                    ║
// ║                           DO NOT EDIT THIS FILE MANUALLY!                     ║
// ╠═══════════════════════════════════════════════════════════════════════════════╣
// ║                                                                               ║
// ║  This file is AUTOMATICALLY GENERATED by omarchy-niri-config-gen              ║
// ║  Generated on: $timestamp                                                     ║
// ║                                                                               ║
// ║  Any manual changes to this file WILL BE LOST when the config is regenerated  ║
// ║                                                                               ║
// ║  TO MAKE CHANGES:                                                             ║
// ║  1. Edit the source files in ~/.config/niri/                                  ║
// ║  2. Run: omarchy-niri-config-gen generate                                     ║
// ║                                                                               ║
// ║  Source files (in order):                                                     ║
// ║    • ~/.config/niri/input.kdl                                                 ║
// ║    • ~/.config/niri/layout.kdl                                                ║
// ║    • ~/.config/niri/autostart.kdl                                             ║
// ║    • ~/.config/niri/bindings.kdl                                              ║
// ║    • ~/.config/niri/windows.kdl                                               ║
// ║    • ~/.config/niri/workspaces.kdl                                            ║
// ║    • ~/.config/niri/envs.kdl                                                  ║
// ║    • ~/.config/omarchy/current/theme/niri.kdl (theme)                         ║
// ║                                                                               ║
// ║  For help: omarchy-niri-config-gen help                                       ║
// ║                                                                               ║
// ╚═══════════════════════════════════════════════════════════════════════════════╝
//

EOF
}

generate_config() {
    print_info "Generating Niri configuration..."

    # Check files first
    if ! check_files; then
        exit 1
    fi

    # Create output directory if it doesn't exist
    mkdir -p "$(dirname "$OUTPUT_PATH")"

    # Generate config atomically (temp file + mv)
    local temp_file
    temp_file="$(mktemp "${OUTPUT_PATH}.XXXXXX")"

    # Write warning header first
    write_warning_header "$temp_file"

    # Concatenate all source files
    for source in "${SOURCES[@]}"; do
        print_info "Including: $source"
        cat "$source" >> "$temp_file"
        echo "" >> "$temp_file"  # Add newline separator
    done

    # Move temp file to final location
    mv "$temp_file" "$OUTPUT_PATH"

    print_info "Generation successful! Output written to: $OUTPUT_PATH"

    # Validate the generated config
    if ! validate_config; then
        print_error "Generated config is invalid! Exiting."
        exit 1
    fi

    print_info "✅ Config generated and validated successfully!"
}

# Main logic
case "${1:-generate}" in
    "generate"|"gen")
        generate_config
        ;;
    "check")
        check_files
        ;;
    "validate")
        validate_config
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
