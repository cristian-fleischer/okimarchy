#!/bin/bash

# Okimarchy Window Manager Switching Utility
# Allows switching between Hyprland and Niri post-installation

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

echo_success() {
    echo -e "${GREEN}✓${NC} $1"
}

echo_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

echo_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if running in a window manager session
check_session() {
    if [[ -n "${HYPRLAND_INSTANCE_SIGNATURE:-}" ]]; then
        echo "hyprland"
    elif [[ -n "${NIRI_SOCKET:-}" ]]; then
        echo "niri"
    else
        echo "unknown"
    fi
}

# Install missing packages for the target WM
install_wm_packages() {
    local wm="$1"
    local packages_file

    case "$wm" in
        "hyprland")
            packages_file="$HOME/.local/share/omarchy/install/omarchy-hyprland.packages"
            ;;
        "niri")
            packages_file="$HOME/.local/share/omarchy/install/omarchy-niri.packages"
            ;;
        *)
            echo_error "Unknown window manager: $wm"
            return 1
            ;;
    esac

    if [[ ! -f "$packages_file" ]]; then
        echo_error "Package list not found: $packages_file"
        return 1
    fi

    echo_info "Installing packages for $wm..."
    mapfile -t packages < <(grep -v '^#' "$packages_file" | grep -v '^$')
    if [ ${#packages[@]} -gt 0 ]; then
        if sudo pacman -S --noconfirm --needed "${packages[@]}"; then
            echo_success "Packages installed successfully"
        else
            echo_error "Failed to install some packages"
            return 1
        fi
    fi
}

# Update the systemd auto-login service to use the selected WM
update_autologin_service() {
    local wm="$1"
    local service_file="/etc/systemd/system/omarchy-seamless-login.service"

    if [[ ! -f "$service_file" ]]; then
        echo_warning "Omarchy auto-login service not found. You may need to manually start the WM."
        return
    fi

    local exec_command
    case "$wm" in
        "hyprland")
            exec_command="/usr/local/bin/seamless-login uwsm start -- hyprland.desktop"
            ;;
        "niri")
            # Use uwsm to start Niri (consistent with Hyprland approach)
            exec_command="/usr/local/bin/seamless-login uwsm start -- niri.desktop"
            ;;
        *)
            echo_error "Unknown window manager for service update: $wm"
            return 1
            ;;
    esac

    echo_info "Updating auto-login service to use $wm..."

    # Update the ExecStart line in the service file
    if sudo sed -i "s|^ExecStart=.*|ExecStart=$exec_command|" "$service_file"; then
        echo_success "Auto-login service updated"

        # Reload systemd daemon
        sudo systemctl daemon-reload
        echo_success "Systemd daemon reloaded"
    else
        echo_error "Failed to update auto-login service"
        return 1
    fi
}

# Setup configuration for the target WM
setup_wm_config() {
    local wm="$1"

    case "$wm" in
        "hyprland")
            echo_info "Hyprland configuration is already set up"
            # Update auto-login service to use Hyprland
            update_autologin_service "$wm"
            ;;
        "niri")
            echo_info "Setting up Niri configuration..."

            # Generate Niri config using our built-in tool
            if command -v omarchy-niri-config-gen >/dev/null 2>&1; then
                if omarchy-niri-config-gen generate; then
                    echo_success "Niri configuration generated successfully"
                else
                    echo_error "Failed to generate Niri configuration"
                    return 1
                fi
            else
                echo_warning "omarchy-niri-config-gen not found in PATH"
                echo_info "Niri configuration may need to be generated manually"
            fi

            # Update auto-login service to use Niri
            update_autologin_service "$wm"
            ;;
        *)
            echo_error "Unknown window manager: $wm"
            return 1
            ;;
    esac
}

# Main switching function
switch_to_wm() {
    local target_wm="$1"
    local current_session
    current_session=$(check_session)

    echo_info "Current session: $current_session"
    echo_info "Target window manager: $target_wm"

    # Install packages for the target WM
    if ! install_wm_packages "$target_wm"; then
        echo_error "Failed to install packages for $target_wm. Aborting switch."
        return 1
    fi

    # Setup configuration for the target WM
    if ! setup_wm_config "$target_wm"; then
        echo_error "Failed to setup configuration for $target_wm. Aborting switch."
        return 1
    fi

    # Inform user about session restart
    echo_success "Window manager switch setup completed!"
    echo_info "To complete the switch:"
    echo "  1. Save your work and close applications"
    echo "  2. Reboot or restart the session"
    echo ""

    # Ask if user wants to logout now
    echo ""
    if gum confirm "Would you like to logout now to complete the switch?"; then
        case "$current_session" in
            "hyprland")
                hyprctl dispatch exit
                ;;
            "niri")
                niri msg action quit
                ;;
            *)
                echo_info "Please logout manually to complete the switch"
                ;;
        esac
    else
        echo_info "Switch will be completed on your next logout/login"
    fi
}

# Main script
main() {
    echo -e "\n🖥️ Okimarchy Window Manager Switcher\n"

    # Check current session
    local current_session
    current_session=$(check_session)

    if [[ "$current_session" != "unknown" ]]; then
        echo_info "Currently running: $current_session"
    fi

    # Present options
    echo "Select target window manager:"
    local choice
    choice=$(gum choose "Hyprland (traditional tiling)" "Niri (scrollable tiling)" "Cancel")

    case "$choice" in
        "Hyprland (traditional tiling)")
            if ! switch_to_wm "hyprland"; then
                echo_error "Failed to switch to Hyprland"
                exit 1
            fi
            ;;
        "Niri (scrollable tiling)")
            if ! switch_to_wm "niri"; then
                echo_error "Failed to switch to Niri"
                exit 1
            fi
            ;;
        "Cancel"|"")
            echo_info "Window manager switch cancelled"
            exit 0
            ;;
    esac
}

# Check if gum is available
if ! command -v gum >/dev/null 2>&1; then
    echo_error "gum is required but not installed. Please install it first."
    exit 1
fi

# Run main function
main "$@"
