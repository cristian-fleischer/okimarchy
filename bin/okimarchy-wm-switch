#!/bin/bash

# Okimarchy Window Manager Switching Utility
# Allows switching between Hyprland and Niri post-installation

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo_info() {
    echo -e "${BLUE}â„¹${NC} $1"
}

echo_success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

echo_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

echo_error() {
    echo -e "${RED}âœ—${NC} $1"
}

# Check if running in a window manager session
check_session() {
    if [[ -n "${HYPRLAND_INSTANCE_SIGNATURE:-}" ]]; then
        echo "hyprland"
    elif [[ -n "${NIRI_SOCKET:-}" ]]; then
        echo "niri"
    else
        echo "unknown"
    fi
}

# Install missing packages for the target WM
install_wm_packages() {
    local wm="$1"
    local packages_file

    case "$wm" in
        "hyprland")
            packages_file="$HOME/.local/share/omarchy/install/omarchy-hyprland.packages"
            ;;
        "niri")
            packages_file="$HOME/.local/share/omarchy/install/omarchy-niri.packages"
            ;;
        *)
            echo_error "Unknown window manager: $wm"
            return 1
            ;;
    esac

    if [[ ! -f "$packages_file" ]]; then
        echo_error "Package list not found: $packages_file"
        return 1
    fi

    echo_info "Installing packages for $wm..."
    mapfile -t packages < <(grep -v '^#' "$packages_file" | grep -v '^$')
    if [ ${#packages[@]} -gt 0 ]; then
        if sudo pacman -S --noconfirm --needed "${packages[@]}"; then
            echo_success "Packages installed successfully"
        else
            echo_error "Failed to install some packages"
            return 1
        fi
    fi
}
# Setup configuration for the target WM
setup_wm_config() {
    local wm="$1"

    case "$wm" in
        "hyprland")
            echo_info "Hyprland configuration is already set up"
            ;;
        "niri")
            echo_info "Setting up Niri configuration..."

            # Generate Niri config using our built-in tool
            if command -v omarchy-niri-config-gen >/dev/null 2>&1; then
                if omarchy-niri-config-gen generate; then
                    echo_success "Niri configuration generated successfully"
                else
                    echo_error "Failed to generate Niri configuration"
                    return 1
                fi
            else
                echo_warning "omarchy-niri-config-gen not found in PATH"
                echo_info "Niri configuration may need to be generated manually"
            fi
            ;;
        *)
            echo_error "Unknown window manager: $wm"
            return 1
            ;;
    esac
}
# Ensure SDDM autologin matches selected WM (no session entry changes)
set_autologin_session() {
    local wm="$1" session_id
    case "$wm" in
        hyprland) session_id="hyprland-uwsm" ;;
        niri)
            # Ensure a dedicated UWSM-backed Niri session entry exists
            if command -v sudo >/dev/null 2>&1; then
                sudo mkdir -p /usr/share/wayland-sessions
                if [[ ! -f /usr/share/wayland-sessions/niri-uwsm.desktop ]]; then
                    sudo tee /usr/share/wayland-sessions/niri-uwsm.desktop >/dev/null <<'DESKTOP'
[Desktop Entry]
Name=Niri
Comment=Start Niri via UWSM
Exec=uwsm start -- niri --session
Type=Application
DesktopNames=niri
DESKTOP
                fi
            fi
            session_id="niri-uwsm"
            ;;
        *) echo_error "Unknown WM: $wm"; return 1 ;;
    esac

    if ! command -v sudo >/dev/null 2>&1; then
        echo_warning "sudo not available; skipping SDDM autologin update"
        return 0
    fi

    sudo mkdir -p /etc/sddm.conf.d
    if [[ -f /etc/sddm.conf.d/autologin.conf ]]; then
        sudo sed -i "s/^Session=.*/Session=${session_id}/" /etc/sddm.conf.d/autologin.conf
    else
        sudo tee /etc/sddm.conf.d/autologin.conf >/dev/null <<EOF
[Autologin]
User=$USER
Session=${session_id}

[Theme]
Current=breeze
EOF
    fi

    echo_success "SDDM autologin set to: ${session_id}"
}
# Main switching function
switch_to_wm() {
    local target_wm="$1"
    local current_session
    current_session=$(check_session)

    echo_info "Current session: $current_session"
    echo_info "Target window manager: $target_wm"

    # Install packages for the target WM
    if ! install_wm_packages "$target_wm"; then
        echo_error "Failed to install packages for $target_wm. Aborting switch."
        return 1
    fi

    # Setup configuration for the target WM
    if ! setup_wm_config "$target_wm"; then
        echo_error "Failed to setup configuration for $target_wm. Aborting switch."
        return 1
    fi
    # Update login session to match selection
    if ! set_autologin_session "$target_wm"; then
        echo_error "Failed to update login session for $target_wm. Aborting switch."
        return 1
    fi
    # Inform user about session restart
    echo_success "Window manager switch setup completed!"
    echo_info "A reboot is required to finalize the switch and boot into the new WM."
    echo ""
    if gum confirm "Reboot now to complete the switch?"; then
        sudo systemctl reboot
    else
        echo_info "Please reboot when convenient to apply changes"
    fi
}

# Main script
main() {
    echo -e "\nðŸ—— Okimarchy Window Manager Switcher\n"

    # Check current session
    local current_session
    current_session=$(check_session)

    if [[ "$current_session" != "unknown" ]]; then
        echo_info "Currently running: $current_session"
    fi

    # Present options
    echo "Select target window manager:"
    local choice
    choice=$(gum choose "Hyprland (traditional tiling)" "Niri (scrollable tiling)" "Cancel")

    case "$choice" in
        "Hyprland (traditional tiling)")
            if ! switch_to_wm "hyprland"; then
                echo_error "Failed to switch to Hyprland"
                exit 1
            fi
            ;;
        "Niri (scrollable tiling)")
            if ! switch_to_wm "niri"; then
                echo_error "Failed to switch to Niri"
                exit 1
            fi
            ;;
        "Cancel"|"")
            echo_info "Window manager switch cancelled"
            exit 0
            ;;
    esac
}

# Check if gum is available
if ! command -v gum >/dev/null 2>&1; then
    echo_error "gum is required but not installed. Please install it first."
    exit 1
fi

# Run main function
main "$@"
